
from model.context_model import FolderContext
from support import encrypter_support, path_support

KEY_FOLDER_CONTEXT = 'folder_context'
KEY_CODE = 'code'
KEY_FS_ID = 'fs_id'
KEY_FILE_NAME = 'file_name'
KEY_MIDDLE_PATH = 'middle_path'
KEY_ENCRYPT_MIDDLE_PATH= 'encrypt_middle_path'
KEY_ENCRYPT = 'encrypt'
KEY_LOCAL_MTIME = 'local_mtime'
KEY_MODE = 'mode'
KEY_ALREADY_ENCRYPT = 'already_encrypt'

MODE_LOCAL = "local"
MODE_CLOUD = "cloud"

class FileModel:
    __mode: str
    __folder_context:FolderContext
    __code:str  # generated by unencrypt 
    __fs_id:str
    __file_name:str
    __middle_path:str
    __encrypt:bool
    __local_mtime:str
    __already_encrypt:bool

    def get_folder_context(self):
        return self.__folder_context
    def get_code(self):
        return self.__code
    def get_fs_id(self):
        return self.__fs_id
    def get_file_name(self):
        return self.__file_name
    def get_middle_path(self):
        return self.__middle_path
    def get_encrypt(self):
        return self.__encrypt
    def get_local_mtime(self):
        return self.__local_mtime
    def get_mode(self):
        return self.__mode
    def get_already_encrypt(self):
        return self.__already_encrypt
    def set_folder_context(self, folder_context):
        self.__folder_context = folder_context
    def set_code(self, code):
        self.__code = code
    def set_fs_id(self, fs_id):
        self.__fs_id = fs_id
    def set_file_name(self, file_name):
        self.__file_name = file_name
    def set_middle_path(self, middle_path):
        self.__middle_path = middle_path
    def set_encrypt(self, encrypt):
        self.__encrypt = encrypt
    def set_local_mtime(self, local_mtime):
        self.__local_mtime = local_mtime
    def set_mode(self, mode):
        self.__mode = mode
    def set_already_encrypt(self, already_encrypt):
        self.__already_encrypt = already_encrypt

    def to_json(self):
        return {
            KEY_FOLDER_CONTEXT: self.__folder_context.to_json(),
            KEY_CODE: self.__code,
            KEY_FS_ID: self.__fs_id,
            KEY_FILE_NAME: self.__file_name,
            KEY_MIDDLE_PATH: self.__middle_path,
            KEY_ENCRYPT: self.__encrypt,
            KEY_LOCAL_MTIME: self.__local_mtime,
            KEY_MODE: self.__mode,
            KEY_ALREADY_ENCRYPT: self.__already_encrypt

        }
    
    '''
    local_mode unencrypted -->  middle is unencrypted, just return
    local_mode encrypted   -->  middle is unencrypted, just return
    cloud_mode unencrypted -->  middle is unencrypted, just return
    cloud_mode encrypted   -->  middle is encrypted, unencrypt then return
    '''
    def get_file_local_path(self):
        if self.get_encrypt() and self.get_mode() == MODE_CLOUD:
            unencrypted_middle_path = '/'.join([encrypter_support.string_base64_to_source_string(p) for p in self.get_middle_path().split('/')])
            return path_support.merge_path([self.__folder_context.get_local_base_path(), unencrypted_middle_path])
        return path_support.merge_path([self.__folder_context.get_local_base_path(), self.get_middle_path()])
    '''
    local_mode unencrypted -->  middle is unencrypted, just return
    local_mode encrypted   -->  middle is unencrypted, should encrypted then return
    cloud_mode unencrypted -->  middle is unencrypted, just return
    cloud_mode encrypted   -->  middle is encrypted, just return
    '''
    def get_file_cloud_path(self):
        if self.get_encrypt() and self.get_mode() == MODE_LOCAL:
            encrypted_middle_path = '/'.join([encrypter_support.string_source_to_base64_string(p) for p in self.get_middle_path().split('/')])
            return path_support.merge_path([self.__folder_context.get_cloud_base_path(), encrypted_middle_path])
        return path_support.merge_path([self.__folder_context.get_cloud_base_path(), self.get_middle_path()])

    '''
    local_mode unencrypted -->  middle is unencrypted, just return
    local_mode encrypted   -->  middle is unencrypted, should encrypted then return
    cloud_mode unencrypted -->  middle is unencrypted, just return
    cloud_mode encrypted   -->  middle is encrypted, just return
    swap is always for encrypted mode, so the file and folder here should always be encrypted.
    '''
    def get_file_swap_path(self):
        if self.get_encrypt() and self.get_mode() == MODE_LOCAL:
            encrypted_middle_path = '/'.join([encrypter_support.string_source_to_base64_string(p) for p in self.get_middle_path().split('/')])
            return path_support.merge_path([self.__folder_context.get_swap_base_path(), encrypted_middle_path])
        return path_support.merge_path([self.__folder_context.get_swap_base_path(), self.get_middle_path()])

def build_from_file(folder_context:FolderContext, local_file_path:str, mode:str, fs_id:str='',encrypt:bool=False, already_encrypt:bool=False):
    the_file_model = FileModel()
    the_file_model.set_folder_context(folder_context)
    unencrypt_middle_path = local_file_path.removeprefix(folder_context.get_local_base_path())
    if encrypt and mode == MODE_CLOUD:
        the_file_model.set_middle_path('/'.join([encrypter_support.string_source_to_base64_string(p) for p in unencrypt_middle_path.split('/')]))
        the_file_model.set_file_name(encrypter_support.string_source_to_base64_string(local_file_path.split('/')[-1]))
    else:
        the_file_model.set_middle_path(unencrypt_middle_path)
        the_file_model.set_file_name(local_file_path.split('/')[-1])
    the_file_model.set_code(encrypter_support.string_hash(unencrypt_middle_path))
    the_file_model.set_encrypt(encrypt)
    the_file_model.set_fs_id(fs_id)
    the_file_model.set_local_mtime(path_support.get_mtime(local_file_path))
    the_file_model.set_mode(mode)
    return the_file_model

def build_from_data(folder_context:FolderContext, code:str, fs_id:str, file_name:str, middle_path:str, encrypt:bool, local_mtime:str, mode:str, already_encrypt:bool=False):
    the_file_model = FileModel()
    the_file_model.set_folder_context(folder_context)
    the_file_model.set_code(code)
    the_file_model.set_fs_id(fs_id)
    if encrypt and mode == MODE_CLOUD:
        the_file_model.set_middle_path('/'.join([encrypter_support.string_source_to_base64_string(p) for p in middle_path.split('/')]))
        the_file_model.set_file_name(encrypter_support.string_source_to_base64_string(file_name))
    else:
        the_file_model.set_file_name(file_name)
        the_file_model.set_middle_path(middle_path)
    the_file_model.set_encrypt(encrypt)
    the_file_model.set_local_mtime(local_mtime)
    the_file_model.set_mode(mode)
    return the_file_model

def build_from_model(file_model:FileModel):
    return build_from_data(file_model.get_folder_context(), file_model.get_code(), file_model.get_fs_id(), file_model.get_file_name(),
                           file_model.get_middle_path(), file_model.get_encrypt(), file_model.get_local_mtime(), file_model.get_mode())
